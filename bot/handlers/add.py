from __future__ import annotations

import psycopg2
from aiogram.fsm.context import FSMContext
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from logger_config import logger
from bot.handlers.find_user import get_connection, get_user, is_valid_email
from aiogram.filters import Command
from bot.services.find_base_id import get_base_id_by_all

router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddUserState(StatesGroup):
    waiting_for_base = State()
    waiting_for_user_id = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
def assign_user_to_base(base_id: str, email: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞."""
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} –≤ –±–∞–∑—É {base_id}")

    conn = get_connection()
    if not conn:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    user_data = get_user(email)
    if not user_data:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False

    user_id = user_data.get("id")
    if not user_id:
        logger.error(f"–û—à–∏–±–∫–∞: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID.")
        return False

    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT 1 FROM nc_base_users_v2 WHERE base_id = %s AND fk_user_id = %s",
                (base_id, user_id)
            )
            exists = cursor.fetchone()
            if exists:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ {base_id}.")
                return False  # –£–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
            cursor.execute(
                "INSERT INTO nc_base_users_v2 (base_id, fk_user_id, roles) VALUES (%s, %s, 'editor')",
                (base_id, user_id)
            )
        conn.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É (ID: {base_id})")
        return True
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

# –•–µ–Ω–¥–ª–µ—Ä callback-–∫–Ω–æ–ø–∫–∏ "add"
@router.callback_query(lambda c: c.data == "add")
async def cmd_add(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    if callback.message:

        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:")
        await state.set_state(AddUserState.waiting_for_base)
        return
    await callback.answer("caput.", show_alert=True)
    return

# –•–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–∑—ã
@router.message(AddUserState.waiting_for_base)
async def process_base_name(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞, –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.text:
        base_title = message.text.strip()
    else:
        await message.answer("pusto")
        return
    if message.from_user:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã: '{base_title}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    else:
        logger.info(f"üì®–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã: '{base_title}' –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    try:
        base_id = get_base_id_by_all(base_title)
        if base_id:
            logger.info(f"–ë–∞–∑–∞ –Ω–∞–π–¥–µ–Ω–∞: {base_id}")
            await message.answer("–ú–∞–≥–∞–∑–∏–Ω –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ e-mail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            await state.update_data(base_id=base_id)
            await state.set_state(AddUserState.waiting_for_user_id)
        else:
            await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–∞–∑—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –•–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É
@router.message(AddUserState.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞–π–¥–µ–Ω–Ω—É—é –±–∞–∑—É."""
    if message.text:
        email = message.text.strip()
    else:
        await message.answer("pusto")
        return
    if message.from_user:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω e-mail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{email}' –æ—Ç {message.from_user.id}")
    else:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω e-mail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{email}' –æ—Ç unknown user")

    if not is_valid_email(email):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (ID –±–∞–∑—ã)
    data = await state.get_data()
    base_id = data.get("base_id")

    if not base_id:
        if message.from_user:

            logger.error(f"–û—à–∏–±–∫–∞: base_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞: base_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state –¥–ª—è unknown")

        await message.answer("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} –≤ –±–∞–∑—É —Å ID {base_id}")


    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø
    success = assign_user_to_base(base_id, email)

    if success:
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É {base_id}.")
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} –≤ –±–∞–∑—É {base_id}.")
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    if message.from_user:
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")