import psycopg2
from aiogram.fsm.context import FSMContext
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from logger_config import logger
from bot.handlers.find_user import get_connection, is_valid_email, get_user
from bot.services.find_base_id import get_base_id_by_all
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import bot.handlers.button

router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DeleteState(StatesGroup):
    WAITING_FOR_USER_INPUT_EMAIL = State()
    WAITING_FOR_USER_INPUT_BASE = State()


def delete_user(email: str, base_id: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ."""
    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} –∏–∑ –±–∞–∑—ã {base_id}...")

    user_data = get_user(email)
    if not user_data:
        logger.warning(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False

    user_id = user_data.get('id')
    logger.info(f"‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω: {user_id}")

    conn = get_connection()
    if not conn:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False
    basic_id = get_base_id_by_all(base_id)
    try:
        with conn.cursor() as cursor:
            logger.info(f"üóë –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –±–∞–∑—ã {base_id}...")
            cursor.execute(
                "DELETE FROM nc_base_users_v2 WHERE fk_user_id = %s AND base_id = %s",
                (user_id, basic_id)
            )
        conn.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã (ID: {basic_id})")
        return True
    except psycopg2.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()
        logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda c: c.data == "delete")
async def start_delete_process(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    logger.info(f"üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ e-mail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(DeleteState.WAITING_FOR_USER_INPUT_EMAIL)
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(DeleteState.WAITING_FOR_USER_INPUT_EMAIL)
async def process_email_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ email –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –º–∞–≥–∞–∑–∏–Ω–∞."""
    email_input = message.text.strip()
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω email: '{email_input}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    if not is_valid_email(email_input):
        logger.warning(f"‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: {email_input}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail.")
        return

    user_data = get_user(email_input)
    if not user_data:
        logger.warning(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email_input} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email_input} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await state.update_data(email_input=email_input)
    logger.info(f"‚úÖ Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email_input} –ø—Ä–∏–Ω—è—Ç, –∑–∞–ø—Ä–æ—Å–∏–º ID –º–∞–≥–∞–∑–∏–Ω–∞")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(DeleteState.WAITING_FOR_USER_INPUT_BASE)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(DeleteState.WAITING_FOR_USER_INPUT_BASE)
async def process_base_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ."""
    base_input = message.text.strip()
    logger.info(f"üè¢ –ü–æ–ª—É—á–µ–Ω ID –º–∞–≥–∞–∑–∏–Ω–∞: '{base_input}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    data = await state.get_data()
    email = data.get("email_input")
    logger.info(f"üì® –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} –∏–∑ –±–∞–∑—ã {base_input}...")

    try:
        success = delete_user(email, base_input)
        if success:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ {base_input}.")
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ {base_input}.")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email} –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ {base_input}.")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.")
    except Exception as e:
        logger.error(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    logger.info(f"‚ôª –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")
