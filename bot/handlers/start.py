from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.services.nocodb_client import NocodbClient
from config import NOCODB_BASE_URL, NOCODB_API_TOKEN
from logger_config import logger
from bot.handlers.find_user import is_valid_email

router = Router()

class ProjectState(StatesGroup):
    WAITING_FOR_PROJECT_INPUT = State()

def extract_project_id(user_input: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ URL –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ ID."""
    if user_input.startswith("http"):
        parts = user_input.split("/")
        if len(parts) >= 2:
            return parts[-2]
        else:
            raise IndexError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")
    else:
        return user_input

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞."""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ URL:")
    await state.set_state(ProjectState.WAITING_FOR_PROJECT_INPUT)
    logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: WAITING_FOR_PROJECT_INPUT")

@router.message(ProjectState.WAITING_FOR_PROJECT_INPUT)
async def handle_project_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥: {message.text}")
    user_input = message.text

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
        project_id = extract_project_id(user_input)
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞: {project_id}")
    except IndexError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ ID –∏–ª–∏ URL.")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ID –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø—Ä–æ–µ–∫—Ç–∞
        client = NocodbClient(NOCODB_BASE_URL, NOCODB_API_TOKEN)
        users = await client.get_project_users(project_id)

        if users and "users" in users and "list" in users["users"]:
            user_list = users["users"]["list"]
            response = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—Ä–æ–µ–∫—Ç—É:\n"
            for user in user_list:
                email = user.get("email", "–Ω–µ —É–∫–∞–∑–∞–Ω")
                roles = user.get("main_roles", "–Ω–µ—Ç —Ä–æ–ª–∏")
                response += f"- {email} (—Ä–æ–ª—å: {roles})\n"
            await message.answer(response)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {users}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NocoDB: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()