# bot/handlers/start.py
import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.services.nocodb_client import NocodbClient
from config import NOCODB_BASE_URL, NOCODB_API_TOKEN

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ProjectState(StatesGroup):
    WAITING_FOR_PROJECT_ID = State()

def extract_project_id(text: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ NocoDB –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID.

    :param text: –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç (ID –∏–ª–∏ —Å—Å—ã–ª–∫–∞).
    :return: ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å.
    """
    match = re.search(r"/projects/(\d+)", text)
    if match:
        return match.group(1)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã ID

    if text.isdigit():  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
        return text

    return None  # –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID –ø—Ä–æ–µ–∫—Ç–∞."""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É:")
    await state.set_state(ProjectState.WAITING_FOR_PROJECT_ID)

@router.message(ProjectState.WAITING_FOR_PROJECT_ID)
async def handle_project_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID –∏–ª–∏ —Å—Å—ã–ª–∫—É."""
    user_input = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    project_id = extract_project_id(user_input)

    if project_id is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø—Ä–æ–µ–∫—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ ID.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç NocoDB
    client = NocodbClient(NOCODB_BASE_URL, NOCODB_API_TOKEN)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø—Ä–æ–µ–∫—Ç–∞
    users = client.get_project_users(project_id)

    if not users:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–µ {project_id}.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    user_list = users.get("users", {}).get("list", [])

    if not user_list:
        await message.answer(f"üîπ –í –ø—Ä–æ–µ–∫—Ç–µ {project_id} –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º.")
    else:
        response = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—Ä–æ–µ–∫—Ç—É {project_id}:\n"
        for user in user_list:
            email = user.get("email", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π email")
            role = user.get("main_roles", "–Ω–µ—Ç —Ä–æ–ª–∏")
            response += f"- {email} ({role})\n"

        await message.answer(response)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
