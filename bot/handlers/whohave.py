import psycopg2
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from logger_config import logger
from bot.handlers.find_user import get_connection, is_valid_email


router = Router()

class WhoState(StatesGroup):
    WAITING_FOR_USER_INPUT = State()

def get_user_bases(email: str) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø."""
    conn = None
    try:
        conn = get_connection()
        if not conn:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return []

        with conn.cursor() as cursor:
            logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: {email}")
            cursor.execute("SELECT id FROM nc_users_v2 WHERE email = %s", (email,))
            user = cursor.fetchone()

            if not user:
                logger.warning(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return []

            user_id = user[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")

            cursor.execute(
                "SELECT base_id FROM nc_base_users_v2 WHERE fk_user_id = %s AND roles = %s LIMIT 30",
                (user_id, "editor")
            )
            base_ids = [row[0] for row in cursor.fetchall()]

            if not base_ids:
                logger.warning(f"‚ö† –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑.")
                return []

            logger.info(f"üìå –ù–∞–π–¥–µ–Ω—ã –±–∞–∑—ã: {base_ids}")

            query = f"SELECT id, title FROM nc_bases_v2 WHERE id IN ({','.join(['%s'] * len(base_ids))})"
            cursor.execute(query, tuple(base_ids))
            bases = cursor.fetchall()

            return [{"id": base[0], "title": base[1]} for base in bases]

    except psycopg2.Error as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []
    except Exception as e:
        logger.error(f"üî• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []
    finally:
        if conn:
            conn.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

@router.callback_query(lambda c: c.data == "who")
async def find_command(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /who –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ e-mail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(WhoState.WAITING_FOR_USER_INPUT)
    logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: WAITING_FOR_USER_INPUT")
    await callback.answer()

@router.message(WhoState.WAITING_FOR_USER_INPUT)
async def handle_user_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ email –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω email: {message.text}")
    user_input = message.text.strip()

    if not is_valid_email(user_input):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail.")
        await state.clear()
        return

    try:
        bases = get_user_bases(user_input)

        if bases:
            response = "üìö –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø:\n"
            for base in bases:
                response += f"{base['title']} (ID: {base['id']})\n"
            await message.answer(response)
        else:
            await message.answer("‚ö† –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")
